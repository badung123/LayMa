@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
	Layout = null;
}
@model CampainViewModel;
(function() {
	var traffic_key = '@Html.Raw(ViewData["Id"])';
	var apiUrl = '@Html.Raw(ViewData["ApiUrl"])';
	var hCaptchaSiteKey = '@Html.Raw(ViewData["HCaptchaSiteKey"])';
	var hCaptchaTokenDefault = '@Html.Raw(ViewData["HCaptchaTokenDefault"])';
	var traffic_id = '';
	var traffic_domain = 's1.what-on.com';
	var cache_time = "cache_remain_time";
	var cache_solution = "cache_solution";
	var count_step = "count_step";
	var cache_flatform = "cache_flatform";
	var initTrafficScript = initTrafficScript || {};
	var traffic_wait_time = 300;
	var timeToScrollUp = 0;
	var timeToScrollDown = 0;
	var timeToScrollUp2 = 0;

	var timeSangManHinh = 25;
	var timeSangManHinhNew = 10;

	var traffic_blurred = !1;;
	var hidden = "hidden";
	let trackingMessageContainer;
	let elementToClickScreenContainer;
	var referrer_pattern_FB = '^http(s|)\:\/\/(www|l|m|lm|mobile|web|touch|fbclid|)(\.)?facebook\.[a-z]{2,3}([.a-z]{2,4}|)';
	var referrer_pattern_GG = '^http(s|)\:\/\/(?:www\.)?google\.[a-z]{2,3}([.a-z]{2,4}|)';
	var referrer_pattern_INS = '^http(s|)\:\/\/(www|l|m|lm|mobile|web|touch|fbclid|)(\.)?instagram\.[a-z]{2,3}([.a-z]{2,4}|)';
	var referrer_pattern_YOUTUBE = '^http(s|)\:\/\/(www|l|m|lm|mobile|web|touch|)(\.)?youtube\.[a-z]{2,3}([.a-z]{2,4}|)';
	var referrer_pattern_CF = '^http(s|)\:\/\/(www|l|m|lm|mobile|web|touch|)(\.)?youtube\.[a-z]{2,3}([.a-z]{2,4}|)';

	var check_ref = false;
	var get_code = true;

	var get_code_string = 'LẤY MÃ';
	var get_code_after_string = 'Lấy mã sau';
	var code_string = 'Mã Code';
	var copied_notify = 'Đã sao chép mã';
	var close_private_mode_message = 'Vui lòng tắt chế độ Ẩn danh để tiếp tục. Xin cảm ơn.';
	var requiredScrollUp = 'Vui lòng cuộn lên để tiếp tục lấy mã';
	var requiredScrollDown = 'Vui lòng cuộn xuống để tiếp tục lấy mã';
	var requiredClickPost = 'Vui lòng nhấn bài viết bất kỳ sau đó kéo xuống dưới cùng để lấy mã(Click đủ 2 lần bài viết sẽ có mã)';
	var requiredClickPostSolution2 = 'Vui lòng nhấn bài viết bất kỳ sau đó kéo xuống dưới cùng để lấy mã(Chỉ cần click 1 lần bài viết sẽ có mã)';
	var loaded_script = false;
	

	if (hidden in document)
		document.addEventListener("visibilitychange", onchange);
	else if ((hidden = "mozHidden") in document)
		document.addEventListener("mozvisibilitychange", onchange);
	else if ((hidden = "webkitHidden") in document)
		document.addEventListener("webkitvisibilitychange", onchange);
	else if ((hidden = "msHidden") in document)
		document.addEventListener("msvisibilitychange", onchange);
	// IE 9 and lower:
	else if ("onfocusin" in document)
		document.onfocusin = document.onfocusout = onchange;
	// All others:
	else
		window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;
	// Localize jQuery variable
	var jQuery;

	if (!isFirstLoad(initTrafficScript)) {
		return;
	}
	/******** Load jQuery if not present *********/
	if (window.jQuery === undefined || window.jQuery.fn === undefined || window.jQuery.fn.jquery !== '3.6.0') {
		
		var script_tag = document.createElement('script');
		script_tag.setAttribute("type","text/javascript");
		script_tag.setAttribute("src",
			"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js");
		if (script_tag.readyState) {
		  script_tag.onreadystatechange = function () {
			  if (this.readyState == 'complete' || this.readyState == 'loaded') {
				  scriptTrafficLoadHandler();
			  }
		  };
		} else {
		  script_tag.onload = scriptTrafficLoadHandler;
		}
		// Try to find the head, otherwise default to the documentElement
		(document.getElementsByTagName("head")[0] || document.documentElement).appendChild(script_tag);
	} else {
		// The jQuery version on the window is the one we want to use
		jQuery = window.jQuery;
		traffic_main();
	}

	/******** Called once jQuery has loaded ******/
	function scriptTrafficLoadHandler() {
		jQuery = window.jQuery.noConflict(true);
		traffic_main();
	}
	const getReferrerByFbclid = () => {
		let url = new URL(location.href)

		if (url.searchParams.has('fbclid')) {
			return 'https://fbclid.facebook.com';
		}

		return null
	}
	const getReferrer = () => {
		let referrer = document.referrer

		if (!referrer) {
			referrer = getReferrerByFbclid()
		}

		return referrer
	}
	const checkReferer = (referrer) =>{
		console.log(referrer);
		if (!referrer) {
			return 'tructiep';
		}
		if(referrer === undefined || referrer == 'undefined'){
			return 'tructiep';
		}
		var regexGG = new RegExp(referrer_pattern_GG,"i");
		if (referrer.match(regexGG)) {
			return 'google';
		}
		var regexFB = new RegExp(referrer_pattern_FB,"i");
		if (referrer.match(regexFB)) {
			return 'facebook';
		}
		var regexINS = new RegExp(referrer_pattern_INS,"i");
		if (referrer.match(regexINS)) {
			return 'instagram';
		}
		var regexYOUTUBE = new RegExp(referrer_pattern_YOUTUBE,"i");
		if (referrer.match(regexYOUTUBE)) {
			return 'youtube';
		}
		@* if (referrer.indexOf('cf_chl_tk') !== -1) {
			return 'cloudflare';
		} *@
		return 'tructiep';
	}
	const ajax = function(url, method = 'GET', data, onSuccess = null, onError = null, onDone = null) {
		let postData = JSON.stringify(data);
		let xhr = new XMLHttpRequest();

		xhr.open(method, url, true);
		xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');
		xhr.send(postData);

		xhr.addEventListener('load', function(event) {
			if (onSuccess) onSuccess(JSON.parse(event.target.response));
			if (onDone) onDone();
		});

		xhr.addEventListener('error', function(event) {
			if (onError) onError(event);
			if (onDone) onDone();
		});
	}

	const ajaxGet = function(url, onSuccess = null, onError = null, onDone = null) {
		return ajax(url, 'GET', [], onSuccess, onError, onDone);
	}

	const ajaxPost = function(url, data, onSuccess = null, onError = null, onDone = null) {
		return ajax(url, 'POST', data, onSuccess, onError, onDone);
	}
	
	// ========================================
	// HELPER FUNCTIONS FOR TIMER OPERATIONS
	// ========================================
	
	/**
	 * Update button display with countdown
	 */
	const updateButtonDisplay = (show_code_button, element, timeInSeconds) => {
		if (element.dataset.click === 'true') {
			show_code_button.innerHTML = get_code_after_string + ' ' + timeInSeconds;
			element.innerHTML = '';
			element.appendChild(show_code_button);
		}
		element.dataset.time = timeInSeconds;
	};
	
	/**
	 * Check if page is blurred and handle timer logic
	 */
	const handleTimerLogic = (timerInterval, timeInMs, show_code_button, element, onComplete) => {				
		timeInMs -= 1000;
		const timeInSeconds = timeInMs / 1000;
		
		updateButtonDisplay(show_code_button, element, timeInSeconds);
				
		// Check completion conditions
		if (onComplete && onComplete(timeInMs, timeInSeconds)) {
			if(timerInterval) clearInterval(timerInterval);
			
		}
	};
	
	/**
	 * Create timer for solution 1 countdown
	 */
	const createSolution1Timer = (show_code_button, element) => {
		let timeInMs = 1000 * traffic_wait_time;
		window.localStorage.setItem(cache_time, timeInMs);
		
		const timerInterval = setInterval(() => {
			const onComplete = (timeInMs, timeInSeconds) => {
				const targetTime = window.localStorage.getItem(cache_time) - 1000 * timeSangManHinhNew;
				if (timeInMs === targetTime) {
					window.localStorage.setItem(cache_time, targetTime);
					checkClickManHinh(show_code_button, element);
					return true;
				}
				return false;
			};
			if(!traffic_blurred){
				handleTimerLogic(timerInterval, timeInMs, show_code_button, element, onComplete);
				timeInMs -= 1000;
				if (timeInMs <= 0){
					checkButtonClick();
					clearInterval(timerInterval);
				 }
			}
			
		}, 1000);
	};
	const createFinalSolution1Timer = (show_code_button, element) => {
		let timeInMs = window.localStorage.getItem(cache_time);
		//window.localStorage.setItem(cache_time, timeInMs);

		const timerInterval = setInterval(() => {			
			timeInMs -= 1000;
			updateTrackingMessage('Tiếp tục lấy mã sau:');			
			const timeInSeconds1 = timeInMs / 1000;
			updateCounterMessage(timeInSeconds1);
			updateButtonDisplay(show_code_button, element, timeInSeconds1);
			if (timeInMs <= 0){
				checkButtonClick();
				clearInterval(timerInterval);
			 }
		}, 1000);
	};
	
	/**
	 * Create timer for solution 3 countdown
	 */
	const createSolution3Timer = (show_code_button, element, step) => {
		let timeInMs = 1000 * traffic_wait_time;
		window.localStorage.setItem(cache_time, timeInMs);
		
		const timerInterval = setInterval(() => {
			const onComplete = (timeInMs, timeInSeconds) => {
				const targetTime = window.localStorage.getItem(cache_time) - 1000 * timeSangManHinh;
				if (timeInMs === targetTime) {
					window.localStorage.setItem(cache_time, targetTime);
					if(step >= 4){
						checkScrollFinalSolution3(show_code_button, element);
					}
					else{
						checkClickManHinhSolution3(show_code_button, element, step);
					}
					
					return true;
				}
				return false;
			};
			if(!traffic_blurred){
				handleTimerLogic(timerInterval, timeInMs, show_code_button, element, onComplete);
				timeInMs -= 1000;
				if (timeInMs <= 0){
					checkButtonClick(step);
					clearInterval(timerInterval);
				 }
			}
			
		}, 1000);
	};
	const checkScrollFinalSolution3 = (show_code_button, element) => {
		
		showTrackingMessage('');
		updateCounterMessage('');
		updateTrackingMessage(requiredScrollUp);
		updateCounterMessage(window.localStorage.getItem(cache_time)/1e3);		

		let typeScr = 'any';
		let previousScrollPosition = window.pageYOffset || document.documentElement.scrollTop;
		const detectScrollType = () => {
			let type = '';

			let scrollPosition = window.pageYOffset || document.documentElement.scrollTop;
			if (scrollPosition > previousScrollPosition) {
				type = 'scrollDown';
			} else if (scrollPosition < previousScrollPosition) {
				type = 'scrollUp';
			}
			previousScrollPosition = scrollPosition;

			return type;
		};

		const scrollHandler = (event) => {
			const scrollType = detectScrollType();
			if (scrollType === 'scrollUp' && (document.documentElement.scrollTop <= 0 || window.pageYOffset <= 0)) {
				window.removeEventListener('scroll', scrollHandler);
				var n = window.localStorage.getItem(cache_time);
				updateTrackingMessage('Tiếp tục lấy mã sau:');
				createFinalSolution1Timer(show_code_button, element);
			}
		}
		window.addEventListener('scroll', scrollHandler);
	
	}
	/**
	 * Create timer for solution 2 new countdown
	 */
	const createSolution2Timer = (show_code_button, element, step) => {
		let timeInMs = 1000 * traffic_wait_time;
		window.localStorage.setItem(cache_time, timeInMs);

		const timerInterval = setInterval(() => {
			const onComplete = (timeInMs, timeInSeconds) => {
				const targetTime = window.localStorage.getItem(cache_time) - 1000 * timeSangManHinh;
				if (timeInMs === targetTime) {
					window.localStorage.setItem(cache_time, targetTime);
					checkClickManHinhSolution2(show_code_button, element, step);
					return true;
				}
				return false;
			};
			if(!traffic_blurred){
				handleTimerLogic(timerInterval, timeInMs, show_code_button, element, onComplete);
				timeInMs -= 1000;
				if (timeInMs <= 0){
					checkButtonClickSolution2(step);
					clearInterval(timerInterval);
				 }
			}

		}, 1000);
	};
	
	/**
	 * Create timer for scroll countdown
	 */
	const createScrollTimer = (show_code_button, element, scrollDirection) => {
		let timeInMs = window.localStorage.getItem(cache_time);
		updateTrackingMessage('Tiếp tục lấy mã sau:');
		
		const timerInterval = setInterval(() => {
			const onComplete = (timeInMs, timeInSeconds) => {
				const targetTime = window.localStorage.getItem(cache_time) - 1000 * timeSangManHinhNew;
				if (timeInMs === targetTime) {
					window.localStorage.setItem(cache_time, targetTime);
					checkClickManHinh(show_code_button, element, scrollDirection);
					return true;
				}
				return false;
			};
			if(!traffic_blurred){
				handleTimerLogic(timerInterval, timeInMs, show_code_button, element, onComplete);
				updateCounterMessage(timeInMs / 1000);
				timeInMs -= 1000;
				if (timeInMs <= 0){
					checkButtonClick();
					clearInterval(timerInterval);
				 }
			}
			
		}, 1000);
	};
	
	/**
	 * Create timer for click screen countdown
	 */
	const createClickScreenTimer = (show_code_button, element, scroll = '') => {
		let timeInMs = window.localStorage.getItem(cache_time);
		updateTrackingMessage('Tiếp tục lấy mã sau:');
		
		let timeCheckScroll = timeToScrollUp;
		let typeScroll = 'scrollUp';
		
		if (scroll === 'down') {
			timeCheckScroll = timeToScrollDown;
			typeScroll = 'scrollDown';
		}
		@* if (scroll === 'up') {
			timeCheckScroll = timeToScrollUp2;
			typeScroll = 'scrollUp';
		} *@
		
		//timeSangManHinh = 20 + Math.floor(Math.random() * 10);
		
		const timerInterval = setInterval(() => {
			const onComplete = (timeInMs, timeInSeconds) => {
				// Check for scroll time
				if (timeInMs === 1000 * timeCheckScroll) {
					window.localStorage.setItem(cache_time, 1000 * timeCheckScroll);
					checkScrollUpDown(show_code_button, element, typeScroll);
					return true;
				}
				
				// Check for click screen time
				const targetTime = window.localStorage.getItem(cache_time) - 1000 * timeSangManHinhNew;
				if (timeInMs === targetTime) {
					window.localStorage.setItem(cache_time, targetTime);
					checkClickManHinh(show_code_button, element, scroll);
					return true;
				}
				
				// Check for completion
				if (timeInMs <= 0) {
					checkButtonClick();
					return true;
				}
				
				return false;
			};
			if(!traffic_blurred){
				handleTimerLogic(timerInterval, timeInMs, show_code_button, element, onComplete);
				updateCounterMessage(timeInMs / 1000);
				timeInMs -= 1000;
				if (timeInMs <= 0){
					checkButtonClick();
					clearInterval(timerInterval);
				 }
			}
			
		}, 1000);
	};
	
	/**
	 * Create timer for solution 3 click screen countdown
	 */
	const createSolution3ClickScreenTimer = (show_code_button, element, step) => {
		let timeInMs = window.localStorage.getItem(cache_time);
		updateTrackingMessage('Tiếp tục lấy mã sau:');
		
		const timerInterval = setInterval(() => {
			const onComplete = (timeInMs, timeInSeconds) => {
				if (timeInMs <= 0) {
					checkButtonClick(step);
					return true;
				}
				return false;
			};
			if(!traffic_blurred){
				handleTimerLogic(timerInterval, timeInMs, show_code_button, element, onComplete);
				updateCounterMessage(timeInMs / 1000);
				timeInMs -= 1000;
				if (timeInMs <= 0){
					checkButtonClick(step);
					clearInterval(timerInterval);
				 }
			}
			
		}, 1000);
	};
	/**
	 * Create timer for solution 2 click screen countdown
	 */
	const createSolution2ClickScreenTimer = (show_code_button, element, step) => {
		let timeInMs = window.localStorage.getItem(cache_time);
		updateTrackingMessage('Tiếp tục lấy mã sau:');

		const timerInterval = setInterval(() => {
			const onComplete = (timeInMs, timeInSeconds) => {
				console.log('step = ' + step);
				if (step >=3){
					// Check for click screen time
					//console.log('vao scroll solution 2 chua check');
					const targetTimeScroll = window.localStorage.getItem(cache_time) - 5000;
					//console.log('targetTimeScroll = ' + targetTimeScroll);
					if (timeInMs === targetTimeScroll) {
						window.localStorage.setItem(cache_time, targetTimeScroll);
						//console.log('vao scroll solution 2');
						checkScrollFinalSolution3(show_code_button, element);
						return true;
					}
				}
				else{
					if (timeInMs <= 0) {
						checkButtonClickSolution2(step);
						return true;
					}
				}
				
				return false;
			};
			if(!traffic_blurred){
				handleTimerLogic(timerInterval, timeInMs, show_code_button, element, onComplete);
				updateCounterMessage(timeInMs / 1000);
				timeInMs -= 1000;
				if (timeInMs <= 0){
					checkButtonClickSolution2(step);
					clearInterval(timerInterval);
				 }
			}

		}, 1000);
	};
	
	const getVisitorInfo = function() {
		var unknown = "-";
		var screenSize = "";
		if (screen.width) {
			width = screen.width ? screen.width : "";
			height = screen.height ? screen.height : "";
			screenSize += "" + width + " x " + height;
		}
		var nVer = navigator.appVersion;
		var nAgt = navigator.userAgent;
		var browser = navigator.appName;
		var version = "" + parseFloat(navigator.appVersion);
		var majorVersion = parseInt(navigator.appVersion, 10);
		var nameOffset, verOffset, ix;
		if ((verOffset = nAgt.indexOf("Opera")) != -1) {
			browser = "Opera";
			version = nAgt.substring(verOffset + 6);
			if ((verOffset = nAgt.indexOf("Version")) != -1) {
				version = nAgt.substring(verOffset + 8);
			}
		}
		if ((verOffset = nAgt.indexOf("OPR")) != -1) {
			browser = "Opera";
			version = nAgt.substring(verOffset + 4);
		} else if ((verOffset = nAgt.indexOf("MSIE")) != -1) {
			browser = "Microsoft Internet Explorer";
			version = nAgt.substring(verOffset + 5);
		} else if ((verOffset = nAgt.indexOf("Chrome")) != -1) {
			browser = "Chrome";
			version = nAgt.substring(verOffset + 7);
		} else if ((verOffset = nAgt.indexOf("Safari")) != -1) {
			browser = "Safari";
			version = nAgt.substring(verOffset + 7);
			if ((verOffset = nAgt.indexOf("Version")) != -1) {
				version = nAgt.substring(verOffset + 8);
			}
		} else if ((verOffset = nAgt.indexOf("Firefox")) != -1) {
			browser = "Firefox";
			version = nAgt.substring(verOffset + 8);
		} else if (nAgt.indexOf("Trident/") != -1) {
			browser = "Microsoft Internet Explorer";
			version = nAgt.substring(nAgt.indexOf("rv:") + 3);
		} else if (
			(nameOffset = nAgt.lastIndexOf(" ") + 1) <
			(verOffset = nAgt.lastIndexOf("/"))
		) {
			browser = nAgt.substring(nameOffset, verOffset);
			version = nAgt.substring(verOffset + 1);
			if (browser.toLowerCase() == browser.toUpperCase()) {
				browser = navigator.appName;
			}
		}
		if ((ix = version.indexOf(";")) != -1) version = version.substring(0, ix);
		if ((ix = version.indexOf(" ")) != -1) version = version.substring(0, ix);
		if ((ix = version.indexOf(")")) != -1) version = version.substring(0, ix);
		majorVersion = parseInt("" + version, 10);
		if (isNaN(majorVersion)) {
			version = "" + parseFloat(navigator.appVersion);
			majorVersion = parseInt(navigator.appVersion, 10);
		}
		var mobile = /Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(nVer);
		var cookieEnabled = navigator.cookieEnabled ? true : false;
		if (typeof navigator.cookieEnabled == "undefined" && !cookieEnabled) {
			document.cookie = "testcookie";
			cookieEnabled =
				document.cookie.indexOf("testcookie") != -1 ? true : false;
		}
		var os = unknown;
		var clientStrings = [{
				s: "Windows 10",
				r: /(Windows 10.0|Windows NT 10.0)/
			},
			{
				s: "Windows 8.1",
				r: /(Windows 8.1|Windows NT 6.3)/
			},
			{
				s: "Windows 8",
				r: /(Windows 8|Windows NT 6.2)/
			},
			{
				s: "Windows 7",
				r: /(Windows 7|Windows NT 6.1)/
			},
			{
				s: "Windows Vista",
				r: /Windows NT 6.0/
			},
			{
				s: "Windows Server 2003",
				r: /Windows NT 5.2/
			},
			{
				s: "Windows XP",
				r: /(Windows NT 5.1|Windows XP)/
			},
			{
				s: "Windows 2000",
				r: /(Windows NT 5.0|Windows 2000)/
			},
			{
				s: "Windows ME",
				r: /(Win 9x 4.90|Windows ME)/
			},
			{
				s: "Windows 98",
				r: /(Windows 98|Win98)/
			},
			{
				s: "Windows 95",
				r: /(Windows 95|Win95|Windows_95)/
			},
			{
				s: "Windows NT 4.0",
				r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/
			},
			{
				s: "Windows CE",
				r: /Windows CE/
			},
			{
				s: "Windows 3.11",
				r: /Win16/
			},
			{
				s: "Android",
				r: /Android/
			},
			{
				s: "Open BSD",
				r: /OpenBSD/
			},
			{
				s: "Sun OS",
				r: /SunOS/
			},
			{
				s: "Linux",
				r: /(Linux|X11)/
			},
			{
				s: "iOS",
				r: /(iPhone|iPad|iPod)/
			},
			{
				s: "Mac OS X",
				r: /Mac OS X/
			},
			{
				s: "Mac OS",
				r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/
			},
			{
				s: "QNX",
				r: /QNX/
			},
			{
				s: "UNIX",
				r: /UNIX/
			},
			{
				s: "BeOS",
				r: /BeOS/
			},
			{
				s: "OS/2",
				r: /OS\/2/
			},
			{
				s: "Search Bot",
				r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/,
			},
		];
		for (var id in clientStrings) {
			var cs = clientStrings[id];
			if (cs.r.test(nAgt)) {
				os = cs.s;
				break;
			}
		}
		var osVersion = unknown;
		if (/Windows/.test(os)) {
			osVersion = /Windows (.*)/.exec(os)[1];
			os = "Windows";
		}
		switch (os) {
			case "Mac OS X":
				osVersion = /Mac OS X (10[\.\_\d]+)/.exec(nAgt)[1];
				break;
			case "Android":
				osVersion = /Android ([\.\_\d]+)/.exec(nAgt)[1];
				break;
			case "iOS":
				osVersion = /OS (\d+)_(\d+)_?(\d+)?/.exec(nVer);
				osVersion =
					osVersion[1] + "." + osVersion[2] + "." + (osVersion[3] | 0);
				break;
		}
		if (typeof swfobject != "undefined") {
			var fv = swfobject.getFlashPlayerVersion();
			if (fv.major > 0) {
				flashVersion = fv.major + "." + fv.minor + " r" + fv.release;
			} else {
				flashVersion = unknown;
			}
		}

		return {
			uuid: getVisitorUUID(),
			browser: browser,
			browserVersion: version,
			browserMajorVersion: majorVersion,
			cookies: cookieEnabled,
			mobile: mobile,
			os: os,
			osVersion: osVersion,
			screen: screenSize,
		};
	}
	const getVisitorUUID = function() {
		let uuid;

		try {
			uuid = localStorage.getItem("__"+traffic_key+"_uuid");
			if (uuid === null) {
				uuid = uuidv4();
				localStorage.setItem("__"+traffic_key+"_uuid", uuid);
			}
		} catch(e) {
			uuid = uuidv4();
		}

		return uuid;
	}
	const uuidv4 = function() {
		if (typeof crypto == 'object') {
			return uuidv4ByCrypto();
		}

		return uuidv4ByMath();
	}

	const uuidv4ByMath = function() {
		let d = new Date().getTime();//Timestamp
		let d2 = ((typeof performance !== 'undefined') && performance.now && (performance.now()*1000)) || 0;//Time in microseconds since page-load or 0 if unsupported
		return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
			let r = Math.random() * 16;//random number between 0 and 16
			if(d > 0){//Use timestamp until depleted
				r = (d + r)%16 | 0;
				d = Math.floor(d/16);
			} else {//Use microseconds since page-load if supported
				r = (d2 + r)%16 | 0;
				d2 = Math.floor(d2/16);
			}
			return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
		});
	}

	const uuidv4ByCrypto = function() {
		return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, function (c) {
			return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
		});
	}
	const showTrackingMessage = (message,top = 45) => {
		if (trackingMessageContainer) {
			trackingMessageContainer.style[top] = top + '%';
			return
		}

		trackingMessageContainer = document.createElement('div')
		const trackingMessageContainerStyles = {
			backgroundColor: 'white',
			padding: '20px',
			fontWeight: 'bold',
			position: 'fixed',
			width: '400px',
			color: 'black',
			top: top +'%',
			left: 'calc(50% - 200px)',
			zIndex: 9999,
			borderRadius: '10px',
			textAlign: 'center',
			display: 'flex',
			justifyContent: 'center',
			flexDirection: 'column',
			alignItems: 'center',
			boxShadow: 'rgba(0, 0, 0, 0.16) 0px 10px 36px 0px, rgba(0, 0, 0, 0.06) 0px 0px 0px 1px',
		}

		for (const [key, value] of Object.entries(trackingMessageContainerStyles)) {
			trackingMessageContainer.style[key] = value
		}

		const messageElement = document.createElement('div')
		messageElement.setAttribute('id', 'message')
		const messageText = document.createTextNode(message)
		messageElement.appendChild(messageText)
		trackingMessageContainer.appendChild(messageElement)

		const counterElement = document.createElement('div')
		counterElement.setAttribute('id', 'counter')
		const counterStyles = {
			border: '1px solid lightgray',
			borderRadius: '999px',
			width: '45px',
			height: '45px',
			display: 'flex',
			justifyContent: 'center',
			alignItems: 'center',
		}

		for (const [key, value] of Object.entries(counterStyles)) {
			counterElement.style[key] = value
		}
		trackingMessageContainer.appendChild(counterElement)
		const xacthucButton = document.createElement('button');
		xacthucButton.setAttribute('id', 'xacthucButton')
		xacthucButton.textContent = 'Xác thực và lấy mã';
		xacthucButton.style.cssText = `
			background-color: #ed1c24;
			color: white;
			border: none;
			padding: 12px 24px;
			border-radius: 5px;
			font-size: 14px;
			font-weight: bold;
			cursor: pointer;
			margin-top: 15px;
			width: 100%;
			display: none;
		`;
		xacthucButton.addEventListener('click', function() {
			var element = document.getElementById(traffic_key);
			var solution = window.localStorage.getItem(cache_solution);

			if((element.dataset.loading == undefined || element.dataset.loading == 'false')
				&& element.dataset.click == 'true'
				&& element.dataset.loaded == undefined
				&& element.dataset.time <= 0
			){
				// Show hCaptcha modal before making API call
				showHCaptchaModalForGetCode(element, solution);
			}
		});
		trackingMessageContainer.appendChild(xacthucButton)

		
		document.body.appendChild(trackingMessageContainer);
	}
	const showElementToClickScreen = () => {
		if (elementToClickScreenContainer) {
			return
		}

		elementToClickScreenContainer = document.createElement('div')
		const elementToClickScreenContainerStyles = {
			backgroundColor: 'transparent',
			position: 'fixed',
			width: '100%',
			height: '100%',
			zIndex: 99999
		}

		for (const [key, value] of Object.entries(elementToClickScreenContainerStyles)) {
			elementToClickScreenContainer.style[key] = value
		}

		document.body.appendChild(elementToClickScreenContainer);
	}
	const updateCounterMessage = (counter) => {
		if (!trackingMessageContainer) {
			showTrackingMessage('')
		}

		const counterElement = trackingMessageContainer.querySelector('#counter')
		counterElement.innerHTML = '' + counter;
	}

	const updateTrackingMessage = (message,top = 45) => {
		if (!trackingMessageContainer) {
			showTrackingMessage(message,top)
		}

		const messageElement = trackingMessageContainer.querySelector('#message');
		trackingMessageContainer.style['top'] = top + '%';
		messageElement.innerHTML = message
	}
	// Load hCaptcha script dynamically
	function loadHCaptchaScript() {
		return new Promise((resolve, reject) => {
			// Check if hCaptcha is already loaded
			if (window.hcaptcha) {
				resolve();
				return;
			}

			// Create script element
			var script = document.createElement('script');
			script.src = 'https://js.hcaptcha.com/1/api.js?hl=vi';
			script.async = true;
			script.defer = true;

			// Handle script load
			script.onload = function() {
				// Wait a bit for hCaptcha to initialize
				setTimeout(() => {
					if (window.hcaptcha) {
						resolve();
					} else {
						reject(new Error('hCaptcha failed to load'));
					}
				}, 1000);
			};

			// Handle script error
			script.onerror = function() {
				reject(new Error('Failed to load hCaptcha script'));
			};

			// Add script to head
			document.head.appendChild(script);
		});
	}

	// hCaptcha Modal Functions
	function showHCaptchaModalForGetCode(element, solution) {
		// Load hCaptcha script first, then show modal
		//loadHCaptchaScript().then(() => {
			//showHCaptchaModalInternal(element, solution);
		//}).catch((error) => {
			//console.error('Failed to load hCaptcha:', error);
			//alert('Không thể tải hCaptcha. Vui lòng thử lại.');
		//});
		showHCaptchaModalInternal(element, solution);
	}

	function showHCaptchaModalInternal(element, solution) {
		// Create modal overlay
		var modalOverlay = document.createElement('div');
		modalOverlay.id = 'hcaptcha-modal-overlay';
		modalOverlay.style.cssText = `
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background-color: rgba(0, 0, 0, 0.5);
			z-index: 9999;
			display: flex;
			justify-content: center;
			align-items: center;
		`;

		// Create modal content
		var modalContent = document.createElement('div');
		modalContent.id = 'hcaptcha-modal-content';
		modalContent.style.cssText = `
			background-color: white;
			padding: 30px;
			border-radius: 10px;
			box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
			max-width: 400px;
			width: 90%;
			text-align: center;
		`;

		// Create modal title
		var modalTitle = document.createElement('h3');
		modalTitle.textContent = 'Xác thực bảo mật.';
		modalTitle.style.cssText = `
			margin: 0 0 20px 0;
			color: #333;
			font-size: 18px;
			font-weight: bold;
		`;

		// Create hCaptcha container
		var hcaptchaContainer = document.createElement('div');
		hcaptchaContainer.className = 'h-captcha';
		hcaptchaContainer.setAttribute('data-sitekey', hCaptchaSiteKey);
		hcaptchaContainer.style.cssText = `
			display: flex;
			justify-content: center;
			margin: 20px 0;
		`;

		// Create verify button
		var verifyButton = document.createElement('button');
		verifyButton.textContent = 'Xác thực và lấy mã';
		verifyButton.style.cssText = `
			background-color: #ed1c24;
			color: white;
			border: none;
			padding: 12px 24px;
			border-radius: 5px;
			font-size: 14px;
			font-weight: bold;
			cursor: pointer;
			margin-top: 15px;
			width: 100%;
		`;

		// Create close button
		var closeButton = document.createElement('button');
		closeButton.textContent = 'Đóng';
		closeButton.style.cssText = `
			background-color: #6c757d;
			color: white;
			border: none;
			padding: 8px 16px;
			border-radius: 5px;
			font-size: 12px;
			cursor: pointer;
			margin-top: 10px;
		`;
		// Create modal title noti
		var modalTitleNoti = document.createElement('h4');
		modalTitleNoti.textContent = 'Nếu Captcha Lỗi, Bấm Đóng Và Xác Thực Captcha Lại';
		modalTitleNoti.style.cssText = `
			margin: 0 0 20px 0;
			color: #333;
			font-size: 14px;
			font-weight: bold;
		`;
		//const delay = (delayInms) => {
		  //return new Promise(resolve => setTimeout(resolve, delayInms));
		//};

		// Add event listeners
		verifyButton.addEventListener('click', function() {
			
			var hcaptchaToken = hcaptcha.getResponse();
			if (!hcaptchaToken) {
				
				
			}
			console.log("hcaptchaToken: " + hcaptchaToken)
			// Close modal
			document.body.removeChild(modalOverlay);
			
			// Make API call with hCaptcha token
			element.dataset.loading = 'true';
			ajaxPost(
				apiUrl + "/api/admin/codemanager/getcode",
				{
					...getVisitorInfo(),
					referrer: getReferrer(),
					trafficId: traffic_id,
					solution: solution,
					hCaptchaToken: hcaptchaToken,
					hCaptchaTokenDuPhong: hCaptchaTokenDefault
				},
				(result) => {
					if(result.success){
						window.localStorage.removeItem(cache_flatform);
						window.localStorage.removeItem(cache_solution);
						window.localStorage.removeItem(count_step);
						let radomTop = 25 + Math.floor(Math.random() * 55);
						updateTrackingMessage(code_string + ': ' + result.html + '<img alt="' + window.location.hostname + '" src="https://' + traffic_domain + '/images/icons/icon-copy.png" style="height: 14px !important;margin: -5px 0 0 3px !important;vertical-align: middle;display: inline-block;width:auto !important;">',radomTop);
						trackingMessageContainer.addEventListener("click", function(){
							if(copyTextToClipboard(result.html)){
								var tooltip = createTooltip(copied_notify);
								trackingMessageContainer.appendChild(tooltip);
								window.setTimeout(function(){
									tooltip.remove();
								},3000);
							}
							return false;
						});
						element.dataset.loaded = true;
						document.getElementById("xacthucButton").style.display = "none";
						//document.body.removeChild(modalOverlay);
					}else{
						window.localStorage.removeItem(cache_flatform);
						window.localStorage.removeItem(cache_solution);
						window.localStorage.removeItem(count_step);
						element.getElementsByTagName("div")[0].innerHTML = 'Lỗi khi lấy mã. Bạn vui lòng thử lại.';
						document.getElementById("xacthucButton").style.display = "none";
						setTimeout(function(){
							element.remove();
						}, 5000);
					}
				},
				(event) => {
					window.localStorage.removeItem(cache_flatform);
					window.localStorage.removeItem(cache_solution);
					window.localStorage.removeItem(count_step);
					element.getElementsByTagName("div")[0].innerHTML = 'Lỗi khi lấy mã. Bạn vui lòng thử lại.';
					document.getElementById("xacthucButton").style.display = "none";
					setTimeout(function(){
						element.remove();
					}, 5000);
				},
				() => {
					window.localStorage.removeItem(cache_flatform);
					window.localStorage.removeItem(cache_solution);
					window.localStorage.removeItem(count_step);
					element.dataset.loading = 'false';
					document.getElementById("xacthucButton").style.display = "none";
				}
			);
		});

		closeButton.addEventListener('click', function() {
			//hcaptcha.reset();
			document.body.removeChild(modalOverlay);
		});

		// Close modal when clicking overlay
		modalOverlay.addEventListener('click', function(e) {
			if (e.target === modalOverlay) {
				document.body.removeChild(modalOverlay);
				//hcaptcha.reset();
			}
		});

		// Assemble modal
		modalContent.appendChild(modalTitle);
		modalContent.appendChild(hcaptchaContainer);
		modalContent.appendChild(verifyButton);
		modalContent.appendChild(closeButton);
		modalContent.appendChild(modalTitleNoti);
		modalOverlay.appendChild(modalContent);

		// Add to page
		document.body.appendChild(modalOverlay);

		// Render hCaptcha
		hcaptcha.render(hcaptchaContainer);
	}

	function showHCaptchaModal(element, show_code_button, n) {
		// Load hCaptcha script first, then show modal
		//loadHCaptchaScript().then(() => {
			//showHCaptchaModalInternalOld(element, show_code_button, n);
		//}).catch((error) => {
			//console.error('Failed to load hCaptcha:', error);
			//alert('Không thể tải hCaptcha. Vui lòng thử lại.');
		//});
		showHCaptchaModalInternalOld(element, show_code_button, n);
	}

	function showHCaptchaModalInternalOld(element, show_code_button, n) {
		// Create modal overlay
		var modalOverlay = document.createElement('div');
		modalOverlay.id = 'hcaptcha-modal-overlay';
		modalOverlay.style.cssText = `
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background-color: rgba(0, 0, 0, 0.5);
			z-index: 9999;
			display: flex;
			justify-content: center;
			align-items: center;
		`;

		// Create modal content
		var modalContent = document.createElement('div');
		modalContent.id = 'hcaptcha-modal-content';
		modalContent.style.cssText = `
			background-color: white;
			padding: 30px;
			border-radius: 10px;
			box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
			max-width: 400px;
			width: 90%;
			text-align: center;
		`;

		// Create modal title
		var modalTitle = document.createElement('h3');
		modalTitle.textContent = 'Xác thực bảo mật';
		modalTitle.style.cssText = `
			margin: 0 0 20px 0;
			color: #333;
			font-size: 18px;
			font-weight: bold;
		`;

		// Create hCaptcha container
		var hcaptchaContainer = document.createElement('div');
		hcaptchaContainer.className = 'h-captcha';
		hcaptchaContainer.setAttribute('data-sitekey', hCaptchaSiteKey);
		hcaptchaContainer.style.cssText = `
			display: flex;
			justify-content: center;
			margin: 20px 0;
		`;

		// Create verify button
		var verifyButton = document.createElement('button');
		verifyButton.textContent = 'Xác thực và lấy mã';
		verifyButton.style.cssText = `
			background-color: #ed1c24;
			color: white;
			border: none;
			padding: 12px 24px;
			border-radius: 5px;
			font-size: 14px;
			font-weight: bold;
			cursor: pointer;
			margin-top: 15px;
			width: 100%;
		`;

		// Create close button
		var closeButton = document.createElement('button');
		closeButton.textContent = 'Đóng';
		closeButton.style.cssText = `
			background-color: #6c757d;
			color: white;
			border: none;
			padding: 8px 16px;
			border-radius: 5px;
			font-size: 12px;
			cursor: pointer;
			margin-top: 10px;
		`;

		// Add event listeners
		verifyButton.addEventListener('click', function() {
			var hcaptchaToken = hcaptcha.getResponse();
			if (!hcaptchaToken) {
				
			}
			console.log(hcaptchaToken);
			
			// Close modal
			document.body.removeChild(modalOverlay);
			
			// Start the timer and process
			show_code_button.innerHTML = get_code_after_string + ' ' + n/1e3;
			element.innerHTML = '';
			element.appendChild(show_code_button);
			element.dataset.time = traffic_wait_time;
			element.dataset.click = 'true';
			element.dataset.hcaptchaToken = hcaptchaToken; // Store token for later use
			createSolution1Timer(show_code_button, element);
		});

		closeButton.addEventListener('click', function() {
			//hcaptcha.reset();
			document.body.removeChild(modalOverlay);
		});

		// Close modal when clicking overlay
		modalOverlay.addEventListener('click', function(e) {
			if (e.target === modalOverlay) {
				//hcaptcha.reset();
				document.body.removeChild(modalOverlay);
			}
		});

		// Assemble modal
		modalContent.appendChild(modalTitle);
		modalContent.appendChild(hcaptchaContainer);
		modalContent.appendChild(verifyButton);
		modalContent.appendChild(closeButton);
		modalOverlay.appendChild(modalContent);

		// Add to page
		document.body.appendChild(modalOverlay);

		// Render hCaptcha
		hcaptcha.render(hcaptchaContainer);
	}

	/******** Our traffic_main function ********/
	function traffic_main() {

		var initScript = function(){
			if(loaded_script){
				return;
			}
			
			var randomSolution = window.localStorage.getItem(cache_solution);
			if (randomSolution === null || randomSolution == 0) {
				randomSolution = Math.floor((Math.random() * 2));
			}else{
				//check reference
				let refe = checkReferer(getReferrer());
				if(refe != 'tructiep'){
					window.localStorage.removeItem(cache_flatform);
					window.localStorage.removeItem(cache_solution);
					window.localStorage.removeItem(count_step);
					randomSolution = Math.floor((Math.random() * 2));
				}
				
			}
			window.localStorage.setItem(cache_solution,randomSolution);
			if (randomSolution == 0) {
				const referrer = getReferrer();
				var flatform = checkReferer(referrer);
				if(flatform != 'tructiep'){
					check_ref =true;
					ajaxGet(
						apiUrl + "/api/admin/campain?keytoken=" + traffic_key + "&flatform=" + flatform,
						(result) => {
							traffic_id = result.id;
							var element = document.getElementById(traffic_key);
							var numberPositionRandom = Math.floor(Math.random() * 9) + 4;
							var widthRan = Math.floor(numberPositionRandom *100 /12);
							var numberFloatRandom = Math.floor((Math.random() * 2));
							var styleFloat = numberFloatRandom == 0 ? 'left' : 'right';
							var styleRandom = document.createElement('style');
							styleRandom.type = 'text/css';
							styleRandom.innerHTML = '.colRan-' +  numberPositionRandom + ' { width:' + widthRan + '%;flex:0 0 auto;float:'+styleFloat+'}';
							document.getElementsByTagName('head')[0].appendChild(styleRandom);
							var numberAlignRandom = Math.floor(Math.random() * 3);
							var alignText = numberAlignRandom == 0 ? 'left !important' : (numberAlignRandom == 1 ? 'center !important' : 'right !important');
							var styleAlignRandom = document.createElement('style');
							styleAlignRandom.type = 'text/css';
							styleAlignRandom.innerHTML = '.alignRan' + ' { text-align:' + alignText + ';}';
							document.getElementsByTagName('head')[0].appendChild(styleAlignRandom);
							element.classList.add('colRan-' +  numberPositionRandom);
							element.classList.add('alignRan');

							//start solution 1
							traffic_wait_time = result.timeOnSitePerView;
							traffic_wait_time = 80 + Math.floor(Math.random() * 40);
							timeSangManHinhNew = timeSangManHinhNew + Math.floor(Math.random() * 20);
							timeToScrollUp = traffic_wait_time - timeSangManHinhNew - 3;
							timeToScrollDown = timeToScrollUp - timeSangManHinhNew - 3;
							//timeToScrollUp2 = timeToScrollDown - (65 + Math.floor(Math.random() * 10));
							if(element
								&& check_ref
								&& get_code
							){
								//showElementToClickScreen();
								loaded_script = true;

								// element.style.background = '#fff';
								element.style.padding = '5px';
								element.style.color = '#000';
								element.style.position = 'relative';
								element.style.clear = 'both';


								var button = document.createElement("span");
								button.innerHTML = '<img alt="' + window.location.hostname + '" src="https://' + traffic_domain + '/images/icons/icon-x64.png" height="" style="padding:0;vertical-align:middle;padding-right:5px !important;width:auto !important;height:15px !important;display:inline-block !important;margin: 0!important;border: none!important;border-radius: unset!important;float: unset!important;background:none !important;" /> <span style="display:inline-block;vertical-align:middle;color:#fff">' + get_code_string + '</span>';
								button.style.background = '#ed1c24';
								button.style.border = '1px solid #fff';
								button.style.color = '#fff';
								button.style.fontWeight = '700';
								button.style.fontSize = '14px';
								button.style.borderRadius = '7px';
								button.style.padding = '5px 10px';
								button.style.margin = '5px';
								button.style.minHeight = 'auto';
								button.style.minWidth = '130px';
								button.style.lineHeight = '20px';
								button.style.verticalAlign = 'middle';
								button.style.width = 'auto';
								button.style.cursor = 'pointer';
								button.style.display = 'inline-block';

								var show_code_button = document.createElement("div");
								show_code_button.innerHTML = '';
								show_code_button.style.background = '#ed1c24';
								show_code_button.style.border = '1px solid #fff';
								show_code_button.style.color = '#fff';
								show_code_button.style.fontWeight = '700';
								show_code_button.style.fontSize = '14px';
								show_code_button.style.borderRadius = '7px';
								show_code_button.style.padding = '5px 10px';
								show_code_button.style.margin = '5px';
								show_code_button.style.display = 'inline-block';
								show_code_button.style.minHeight = 'auto';
								show_code_button.style.minWidth = '130px';
								show_code_button.style.lineHeight = '20px';
								show_code_button.style.verticalAlign = 'middle';
								show_code_button.style.width = 'auto';

								element.appendChild(button);

								var n=1e3*traffic_wait_time;
								window.localStorage.setItem(cache_time,n);
								var clickHandler = ('ontouchstart' in document.documentElement ? "touchstart" : "click");


								button.addEventListener('mouseenter', e => {
									button.style.background = '#c40b11';
								});

								button.addEventListener('mouseleave', e => {
									button.style.background = '#ed1c24';
								});

								button.addEventListener('mousedown', e => {
									button.style.background = '#9a070d';
								});

								button.addEventListener('mouseup', e => {
									button.style.background = '#ed1c24';
								});

								button.addEventListener(clickHandler, function(event){
									event.preventDefault();
									detectIncognito().then((result) => {
										if(result.isPrivate){
											show_code_button.innerHTML= close_private_mode_message;
											element.innerHTML='';
											element.appendChild(show_code_button);
										}else{
											show_code_button.innerHTML= get_code_after_string + ' ' + n/1e3;
											element.innerHTML='';
											element.appendChild(show_code_button);
											element.dataset.time = traffic_wait_time;
											element.dataset.click = 'true';
											createSolution1Timer(show_code_button, element);
										}
									});
									return false;
								});
							}
						},
						(event) => {
							console.log(event);
						},
						() => {

						});
				}
			} 
			else if(randomSolution == 1){
				var step = window.localStorage.getItem(count_step);
				if (step === null) {
					step = 1;
				}
				var flatform = 'tructiep';
				if (step == 1) {
					const referrer = getReferrer();
					flatform = checkReferer(referrer);
					window.localStorage.setItem(cache_flatform,flatform);
				}
				else{
					flatform = window.localStorage.getItem(cache_flatform);
				}
				if(typeof step === 'string') step = parseInt(step);
				step = step + 1;
				window.localStorage.setItem(count_step,step);

				if(flatform != 'tructiep'){
					check_ref =true;
					ajaxGet(
						apiUrl + "/api/admin/campain?keytoken=" + traffic_key + "&flatform=" + flatform,
						(result) => {
							traffic_id = result.id;
							var element = document.getElementById(traffic_key);
							var numberPositionRandom = Math.floor(Math.random() * 9) + 4;
							var widthRan = Math.floor(numberPositionRandom *100 /12);
							var numberFloatRandom = Math.floor((Math.random() * 2));
							var styleFloat = numberFloatRandom == 0 ? 'left' : 'right';
							var styleRandom = document.createElement('style');
							styleRandom.type = 'text/css';
							styleRandom.innerHTML = '.colRan-' +  numberPositionRandom + ' { width:' + widthRan + '%;flex:0 0 auto;float:'+styleFloat+'}';
							document.getElementsByTagName('head')[0].appendChild(styleRandom);
							var numberAlignRandom = Math.floor(Math.random() * 3);
							var alignText = numberAlignRandom == 0 ? 'left !important' : (numberAlignRandom == 1 ? 'center !important' : 'right !important');
							var styleAlignRandom = document.createElement('style');
							styleAlignRandom.type = 'text/css';
							styleAlignRandom.innerHTML = '.alignRan' + ' { text-align:' + alignText + ';}';
							document.getElementsByTagName('head')[0].appendChild(styleAlignRandom);
							element.classList.add('colRan-' +  numberPositionRandom);
							element.classList.add('alignRan');

							//start solution 2
							if(step == 2){
								traffic_wait_time = Math.floor(Math.random() * 30) + 50;
								timeSangManHinh = Math.floor(Math.random() * 10) + 20;
							}
							else{
								traffic_wait_time = Math.floor(Math.random() * 30) + 30;
								timeSangManHinh = Math.floor(Math.random() * 20) + 10;
							}
							

							if(element
								&& check_ref
								&& get_code
							){
								//showElementToClickScreen();
								loaded_script = true;

								// element.style.background = '#fff';
								element.style.padding = '5px';
								element.style.color = '#000';
								element.style.position = 'relative';
								element.style.clear = 'both';


								var button = document.createElement("span");
								button.innerHTML = '<img alt="' + window.location.hostname + '" src="https://' + traffic_domain + '/images/icons/icon-x64.png" height="" style="padding:0;vertical-align:middle;padding-right:5px !important;width:auto !important;height:15px !important;display:inline-block !important;margin: 0!important;border: none!important;border-radius: unset!important;float: unset!important;background:none !important;" /> <span style="display:inline-block;vertical-align:middle;color:#fff">' + get_code_string + '</span>';
								button.style.background = '#ed1c24';
								button.style.border = '1px solid #fff';
								button.style.color = '#fff';
								button.style.fontWeight = '700';
								button.style.fontSize = '14px';
								button.style.borderRadius = '7px';
								button.style.padding = '5px 10px';
								button.style.margin = '5px';
								button.style.minHeight = 'auto';
								button.style.minWidth = '130px';
								button.style.lineHeight = '20px';
								button.style.verticalAlign = 'middle';
								button.style.width = 'auto';
								button.style.cursor = 'pointer';
								button.style.display = 'inline-block';

								var show_code_button = document.createElement("div");
								show_code_button.innerHTML = '';
								show_code_button.style.background = '#ed1c24';
								show_code_button.style.border = '1px solid #fff';
								show_code_button.style.color = '#fff';
								show_code_button.style.fontWeight = '700';
								show_code_button.style.fontSize = '14px';
								show_code_button.style.borderRadius = '7px';
								show_code_button.style.padding = '5px 10px';
								show_code_button.style.margin = '5px';
								show_code_button.style.display = 'inline-block';
								show_code_button.style.minHeight = 'auto';
								show_code_button.style.minWidth = '130px';
								show_code_button.style.lineHeight = '20px';
								show_code_button.style.verticalAlign = 'middle';
								show_code_button.style.width = 'auto';

								element.appendChild(button);

								var n=1e3*traffic_wait_time;
								window.localStorage.setItem(cache_time,n);
								var clickHandler = ('ontouchstart' in document.documentElement ? "touchstart" : "click");


								button.addEventListener('mouseenter', e => {
									button.style.background = '#c40b11';
								});

								button.addEventListener('mouseleave', e => {
									button.style.background = '#ed1c24';
								});

								button.addEventListener('mousedown', e => {
									button.style.background = '#9a070d';
								});

								button.addEventListener('mouseup', e => {
									button.style.background = '#ed1c24';
								});

								button.addEventListener(clickHandler, function(event){
									event.preventDefault();
									detectIncognito().then((result) => {
										if(result.isPrivate){
											show_code_button.innerHTML= close_private_mode_message;
											element.innerHTML='';
											element.appendChild(show_code_button);
										}else{
											show_code_button.innerHTML= get_code_after_string + ' ' + n/1e3;
											element.innerHTML='';
											element.appendChild(show_code_button);
											element.dataset.time = traffic_wait_time;
											element.dataset.click = 'true';
											createSolution2Timer(show_code_button, element, step);
										}
									});
									return false;
								});
							}
						},
						(event) => {
							console.log(event);
						},
						() => {

						});
				}
			}
			else{
				var step = window.localStorage.getItem(count_step);
				if (step === null) {
					step = 1;
				}
				var flatform = 'tructiep';
				if (step == 1) {
					const referrer = getReferrer();
					flatform = checkReferer(referrer);
					window.localStorage.setItem(cache_flatform,flatform);
				}
				else{
					flatform = window.localStorage.getItem(cache_flatform);
				}
				if(typeof step === 'string') step = parseInt(step);
				step = step + 1;
				window.localStorage.setItem(count_step,step);
				
				if(flatform != 'tructiep'){
					check_ref =true;
					ajaxGet(
						apiUrl + "/api/admin/campain?keytoken=" + traffic_key + "&flatform=" + flatform,
						(result) => {
							traffic_id = result.id;
							var element = document.getElementById(traffic_key);
							var numberPositionRandom = Math.floor(Math.random() * 9) + 4;
							var widthRan = Math.floor(numberPositionRandom *100 /12);
							var numberFloatRandom = Math.floor((Math.random() * 2));
							var styleFloat = numberFloatRandom == 0 ? 'left' : 'right';
							var styleRandom = document.createElement('style');
							styleRandom.type = 'text/css';
							styleRandom.innerHTML = '.colRan-' +  numberPositionRandom + ' { width:' + widthRan + '%;flex:0 0 auto;float:'+styleFloat+'}';
							document.getElementsByTagName('head')[0].appendChild(styleRandom);
							var numberAlignRandom = Math.floor(Math.random() * 3);
							var alignText = numberAlignRandom == 0 ? 'left !important' : (numberAlignRandom == 1 ? 'center !important' : 'right !important');
							var styleAlignRandom = document.createElement('style');
							styleAlignRandom.type = 'text/css';
							styleAlignRandom.innerHTML = '.alignRan' + ' { text-align:' + alignText + ';}';
							document.getElementsByTagName('head')[0].appendChild(styleAlignRandom);
							element.classList.add('colRan-' +  numberPositionRandom);
							element.classList.add('alignRan');

							//start solution 1
							if(step == 2){
								traffic_wait_time = Math.floor(Math.random() * 20) + 40;
								timeSangManHinh = Math.floor(Math.random() * 15) + 15;
							}
							else if(step == 3){
								traffic_wait_time = Math.floor(Math.random() * 20) + 20;
								timeSangManHinh = Math.floor(traffic_wait_time/2);
							}
							else{
								traffic_wait_time = Math.floor(Math.random() * 15) + 15;
								timeSangManHinh = Math.floor(traffic_wait_time/2);
							}														
							
							if(element
								&& check_ref
								&& get_code
							){
								//showElementToClickScreen();
								loaded_script = true;

								// element.style.background = '#fff';
								element.style.padding = '5px';
								element.style.color = '#000';
								element.style.position = 'relative';
								element.style.clear = 'both';


								var button = document.createElement("span");
								button.innerHTML = '<img alt="' + window.location.hostname + '" src="https://' + traffic_domain + '/images/icons/icon-x64.png" height="" style="padding:0;vertical-align:middle;padding-right:5px !important;width:auto !important;height:15px !important;display:inline-block !important;margin: 0!important;border: none!important;border-radius: unset!important;float: unset!important;background:none !important;" /> <span style="display:inline-block;vertical-align:middle;color:#fff">' + get_code_string + '</span>';
								button.style.background = '#ed1c24';
								button.style.border = '1px solid #fff';
								button.style.color = '#fff';
								button.style.fontWeight = '700';
								button.style.fontSize = '14px';
								button.style.borderRadius = '7px';
								button.style.padding = '5px 10px';
								button.style.margin = '5px';
								button.style.minHeight = 'auto';
								button.style.minWidth = '130px';
								button.style.lineHeight = '20px';
								button.style.verticalAlign = 'middle';
								button.style.width = 'auto';
								button.style.cursor = 'pointer';
								button.style.display = 'inline-block';

								var show_code_button = document.createElement("div");
								show_code_button.innerHTML = '';
								show_code_button.style.background = '#ed1c24';
								show_code_button.style.border = '1px solid #fff';
								show_code_button.style.color = '#fff';
								show_code_button.style.fontWeight = '700';
								show_code_button.style.fontSize = '14px';
								show_code_button.style.borderRadius = '7px';
								show_code_button.style.padding = '5px 10px';
								show_code_button.style.margin = '5px';
								show_code_button.style.display = 'inline-block';
								show_code_button.style.minHeight = 'auto';
								show_code_button.style.minWidth = '130px';
								show_code_button.style.lineHeight = '20px';
								show_code_button.style.verticalAlign = 'middle';
								show_code_button.style.width = 'auto';

								element.appendChild(button);

								var n=1e3*traffic_wait_time;
								window.localStorage.setItem(cache_time,n);
								var clickHandler = ('ontouchstart' in document.documentElement ? "touchstart" : "click");


								button.addEventListener('mouseenter', e => {
									button.style.background = '#c40b11';
								});

								button.addEventListener('mouseleave', e => {
									button.style.background = '#ed1c24';
								});

								button.addEventListener('mousedown', e => {
									button.style.background = '#9a070d';
								});

								button.addEventListener('mouseup', e => {
									button.style.background = '#ed1c24';
								});

								button.addEventListener(clickHandler, function(event){
									event.preventDefault();
									detectIncognito().then((result) => {
										if(result.isPrivate){
											show_code_button.innerHTML= close_private_mode_message;
											element.innerHTML='';
											element.appendChild(show_code_button);
										}else{
											show_code_button.innerHTML= get_code_after_string + ' ' + n/1e3;
											element.innerHTML='';
											element.appendChild(show_code_button);
											element.dataset.time = traffic_wait_time;
											element.dataset.click = 'true';
											createSolution3Timer(show_code_button, element, step);
										}
									});
									return false;
								});
							}
						},
						(event) => {
							console.log(event);
						},
						() => {

						});
				}
			}
		}
		jQuery(document).ready(initScript);
	}
	function isFirstLoad(namesp){
		var isFirst = namesp.firstLoad === undefined;
		namesp.firstLoad = false;
		return isFirst;
	};
	function checkScrollUpDown(show_code_button,element,typeCheck){
		showTrackingMessage('');
		updateCounterMessage('');
		if(typeCheck === 'scrollUp'){
			updateTrackingMessage(requiredScrollUp);
			updateCounterMessage(window.localStorage.getItem(cache_time)/1e3);
		}
		if(typeCheck === 'scrollDown'){
			updateTrackingMessage(requiredScrollDown);
			updateCounterMessage(window.localStorage.getItem(cache_time)/1e3);
		}

		let typeScr = 'any';
		let previousScrollPosition = window.pageYOffset || document.documentElement.scrollTop;
		const detectScrollType = () => {
			let type = '';

			let scrollPosition = window.pageYOffset || document.documentElement.scrollTop;
			if (scrollPosition > previousScrollPosition) {
				type = 'scrollDown';
			} else if (scrollPosition < previousScrollPosition) {
				type = 'scrollUp';
			}
			previousScrollPosition = scrollPosition;

			return type;
		};

		const scrollHandler = (event) => {
			const scrollType = detectScrollType();
			if (scrollType === 'scrollUp' && typeCheck === 'scrollUp' && (document.documentElement.scrollTop <= 0 || window.pageYOffset <= 0)) {
				window.removeEventListener('scroll', scrollHandler);
				var n = window.localStorage.getItem(cache_time);
				updateTrackingMessage('Tiếp tục lấy mã sau:');
				createScrollTimer(show_code_button, element, 'down');
			}
			if (scrollType === 'scrollDown' && typeCheck === 'scrollDown' && ((window.innerHeight + window.pageYOffset + 2) >= document.body.offsetHeight)) {
				window.removeEventListener('scroll', scrollHandler);
				var n = window.localStorage.getItem(cache_time);
				updateTrackingMessage('Tiếp tục lấy mã sau:');
				createFinalSolution1Timer(show_code_button, element);
			}
		}
		window.addEventListener('scroll', scrollHandler);
	}
	function checkClickManHinh(show_code_button,element,scroll=''){
		var clickHandler = ('ontouchstart' in document.documentElement ? "touchstart" : "click");
		updateTrackingMessage('Chạm vào màn hình để lấy mã');
		updateCounterMessage(window.localStorage.getItem(cache_time)/1e3);
		const clickManHinh = () =>{
			window.removeEventListener(clickHandler, clickManHinh);
			var n = window.localStorage.getItem(cache_time);
			updateTrackingMessage('Tiếp tục lấy mã sau:');
			createClickScreenTimer(show_code_button, element, scroll);
		}
		window.addEventListener(clickHandler, clickManHinh);

	}
	function checkClickManHinhSolution2(show_code_button,element,step){
		var clickHandler = ('ontouchstart' in document.documentElement ? "touchstart" : "click");
		updateTrackingMessage('Chạm vào màn hình để lấy mã');
		updateCounterMessage(window.localStorage.getItem(cache_time)/1e3);
		const clickManHinh2 = () =>{
			window.removeEventListener(clickHandler, clickManHinh2);
			var n = window.localStorage.getItem(cache_time);
			updateTrackingMessage('Tiếp tục lấy mã sau:');
			createSolution2ClickScreenTimer(show_code_button, element, step);
		}
		window.addEventListener(clickHandler, clickManHinh2);
	}
	function checkClickManHinhSolution3(show_code_button,element,step){
		var clickHandler = ('ontouchstart' in document.documentElement ? "touchstart" : "click");
		updateTrackingMessage('Chạm vào màn hình để lấy mã');
		updateCounterMessage(window.localStorage.getItem(cache_time)/1e3);
		const clickManHinh1 = () =>{
			window.removeEventListener(clickHandler, clickManHinh1);
			var n = window.localStorage.getItem(cache_time);
			updateTrackingMessage('Tiếp tục lấy mã sau:');
			createSolution3ClickScreenTimer(show_code_button, element, step);
		}
		window.addEventListener(clickHandler, clickManHinh1);
	}
	function checkButtonClick(step = 4){
		
		if (step >= 4) {
			//display button xacthuc
			document.getElementById("xacthucButton").style.display = "block";
			var element = document.getElementById(traffic_key);
			var solution = window.localStorage.getItem(cache_solution);

			if((element.dataset.loading == undefined || element.dataset.loading == 'false')
				&& element.dataset.click == 'true'
				&& element.dataset.loaded == undefined
				&& element.dataset.time <= 0
			){
				// Show hCaptcha modal before making API call
				showHCaptchaModalForGetCode(element, solution);
			}
		}
		else{
			updateTrackingMessage(requiredClickPost);
		}

	}
	function checkButtonClickSolution2(step = 3){

		if (step >= 3) {
			//display button xacthuc
			document.getElementById("xacthucButton").style.display = "block";
			var element = document.getElementById(traffic_key);
			var solution = window.localStorage.getItem(cache_solution);

			if((element.dataset.loading == undefined || element.dataset.loading == 'false')
				&& element.dataset.click == 'true'
				&& element.dataset.loaded == undefined
				&& element.dataset.time <= 0
			){
				// Show hCaptcha modal before making API call
				showHCaptchaModalForGetCode(element, solution);
			}
		}
		else{
			updateTrackingMessage(requiredClickPostSolution2);
		}

	}
	function saveComment(flatform){
		var acc = document.getElementById("accountCmt").value;
		var mess = document.getElementById("messageCmt").value;
		ajaxPost(
					apiUrl + "/api/admin/comment/create",
					{
						account: acc,
						message: mess
					},
					(result) => {
						hideErrorComment();
						getComment();
						if(flatform == 'tructiep'){
							console.log('tructiep');
							// Show hCaptcha modal for direct traffic
							var element = document.getElementById(traffic_key);
							showHCaptchaModalForGetCode(element, "1");
						}
					},
					(event) => {
						console.log(event);
					},
					() => {

					});
	}
	function displayErrorComment(error){
		document.getElementById('error-display').style.display="block";
		document.getElementById('error-display').innerHTML=error;
	}
	function hideErrorComment(){
		document.getElementById('error-display').style.display="none";
	}
	function getComment(){
		ajaxGet(
					apiUrl + "/api/admin/comment/pagingComment?pageIndex=1",
					(result) => {
						console.log(result);
						displayComment(result.results);
					},
					(event) => {
						console.log(event);
					},
					() => {

					});
	}
	function displayComment(data){
		var htmlCmt = '';
		for (let i = 0; i < data.length; i++) {
		  var mydate = new Date(data[i].dateCreated);
		  htmlCmt += '<div class="flex-row align-top"><div class="flex-col flex-grow"><div class="title-cmt"><span class="author-name uppercase">' + data[i].account + '</span><span class="pull-right">'+ mydate.toLocaleTimeString() +'</span></div><p class="author-desc small">' + data[i].message +'</p></div></div>';
		  if(i == data.length - 1){
			  document.getElementById('topCmt').innerHTML = htmlCmt;
		  }
		}
	}
	function onchange (evt) {
		var v = "visible", h = "hidden",
		evtMap = {
			focus:v, focusin:v, pageshow:v, blur:h, focusout:h, pagehide:h
		};
		evt = evt || window.event;
		if (evt.type in evtMap)
			traffic_blurred = evtMap[evt.type] == 'hidden';
		else
			traffic_blurred = this[hidden] ? 1 : 0;
	}
	function copyTextToClipboard(text){
		var textArea = document.createElement("textarea");

		textArea.style.position = 'fixed';
		textArea.style.top = 0;
		textArea.style.left = 0;

		textArea.style.width = '2em';
		textArea.style.height = '2em';

		textArea.style.padding = 0;

		textArea.style.border = 'none';
		textArea.style.outline = 'none';
		textArea.style.boxShadow = 'none';

		textArea.style.background = 'transparent';
		textArea.value = text;
		document.body.appendChild(textArea);

		textArea.select();

		var successful = false;
		try {
			var tmp = document.oncopy;
			document.oncopy = function(){};
			successful = document.execCommand('copy');
			document.oncopy = tmp;
		} catch (err) {
		}
		document.body.removeChild(textArea);
		return successful;
	}

	function createTooltip(text){

		var tooltip = document.createElement("div");
		tooltip.style.top = '-7px';
		tooltip.style.left = '50%';
		tooltip.style.display = 'block';
		tooltip.style.transform = 'translate(-50%,-50%)';
		tooltip.style.padding = '5px 0';
		tooltip.style.opacity = '0.9';
		tooltip.style.position = 'absolute';

		var arrow = document.createElement("div");
		arrow.style.left = '50%';
		arrow.style.bottom = '0';
		arrow.style.marginLeft = '-5px';
		arrow.style.borderWidth = '5px 5px 0';
		arrow.style.position = 'absolute';
		arrow.style.width = '0';
		arrow.style.height = '0';
		arrow.style.borderColor = 'transparent';
		arrow.style.borderStyle = 'solid';
		arrow.style.borderTopColor = '#000';

		var inner = document.createElement("div");
		inner.style.padding = '3px 8px';
		inner.style.color = '#fff';
		inner.style.textAlign = 'center';
		inner.style.backgroundColor = '#000';
		inner.style.borderRadius = '4px';
		inner.innerHTML = text;

		tooltip.appendChild(arrow);
		tooltip.appendChild(inner);

		return tooltip;
	}
	function checkAdsClick(){
		var ads_click = false;
		var url_string = window.location.href;
		var url = new URL(url_string);

		if(url.searchParams.get('gclid') != null){
			ads_click = true;
		}
		return ads_click;
	}
	var detectIncognito = function () {
		return new Promise(function (resolve, reject) {
			var browserName = "Unknown";
			function __callback(isPrivate) {
				resolve({
					isPrivate: isPrivate,
					browserName: browserName
				});
			}
			function identifyChromium() {
				var ua = navigator.userAgent;
				if (ua.match(/Chrome/)) {
					if (navigator.brave !== undefined) {
						return "Brave";
					}
					else if (ua.match(/Edg/)) {
						return "Edge";
					}
					else if (ua.match(/OPR/)) {
						return "Opera";
					}
					return "Chrome";
				}
				else {
					return "Chromium";
				}
			}
			function assertEvalToString(value) {
				return value === eval.toString().length;
			}
			function isSafari() {
				var v = navigator.vendor;
				return (v !== undefined && v.indexOf("Apple") === 0 && assertEvalToString(37));
			}
			function isChrome() {
				var v = navigator.vendor;
				return (v !== undefined && v.indexOf("Google") === 0 && assertEvalToString(33));
			}
			function isFirefox() {
				return (document.documentElement !== undefined &&
					document.documentElement.style.MozAppearance !== undefined &&
					assertEvalToString(37));
			}
			function isMSIE() {
				return (navigator.msSaveBlob !== undefined && assertEvalToString(39));
			}
			/**
			 * Safari (Safari for iOS & macOS)
			 **/
			function newSafariTest() {
				var tmp_name = String(Math.random());
				try {
					var db = window.indexedDB.open(tmp_name, 1);
					db.onupgradeneeded = function (i) {
						var _a, _b;
						var res = (_a = i.target) === null || _a === void 0 ? void 0 : _a.result;
						try {
							res.createObjectStore("test", {
								autoIncrement: true
							}).put(new Blob);
							__callback(false);
						}
						catch (e) {
							var message = e;
							if (e instanceof Error) {
								message = (_b = e.message) !== null && _b !== void 0 ? _b : e;
							}
							if (typeof message !== 'string') {
								return __callback(false);
							}
							var matchesExpectedError = /BlobURLs are not yet supported/.test(message);
							return __callback(matchesExpectedError);
						}
						finally {
							res.close();
							window.indexedDB.deleteDatabase(tmp_name);
						}
					};
				}
				catch (e) {
					return __callback(false);
				}
			}
			function oldSafariTest() {
				var openDB = window.openDatabase;
				var storage = window.localStorage;
				try {
					openDB(null, null, null, null);
				}
				catch (e) {
					return __callback(true);
				}
				try {
					storage.setItem("test", "1");
					storage.removeItem("test");
				}
				catch (e) {
					return __callback(true);
				}
				return __callback(false);
			}
			function safariPrivateTest() {
				if (navigator.maxTouchPoints !== undefined) {
					newSafariTest();
				}
				else {
					oldSafariTest();
				}
			}
			/**
			 * Chrome
			 **/
			function getQuotaLimit() {
				var w = window;
				if (w.performance !== undefined &&
					w.performance.memory !== undefined &&
					w.performance.memory.jsHeapSizeLimit !== undefined) {
				return performance.memory.jsHeapSizeLimit;
				}
				return 1073741824;
			}
			// >= 76
			function storageQuotaChromePrivateTest() {
				navigator.webkitTemporaryStorage.queryUsageAndQuota(function (_, quota) {
					var quotaInMib = Math.round(quota / (1024 * 1024));
					var quotaLimitInMib = Math.round(getQuotaLimit() / (1024 * 1024)) * 2;
					__callback(quotaInMib < quotaLimitInMib);
				}, function (e) {
					reject(new Error("detectIncognito somehow failed to query storage quota: " + e.message));
				});
			}
			// 50 to 75
			function oldChromePrivateTest() {
				var fs = window.webkitRequestFileSystem;
				var success = function () {
					__callback(false);
				};
				var error = function () {
					__callback(true);
				};
				fs(0, 1, success, error);
			}
			function chromePrivateTest() {
				if (self.Promise !== undefined && self.Promise.allSettled !== undefined) {
					storageQuotaChromePrivateTest();
				}
				else {
					oldChromePrivateTest();
				}
			}
			/**
			 * Firefox
			 **/
			function firefoxPrivateTest() {
				__callback(navigator.serviceWorker === undefined);
			}
			/**
			 * MSIE
			 **/
			function msiePrivateTest() {
				__callback(window.indexedDB === undefined);
			}
			function main() {
				if (isSafari()) {
					browserName = 'Safari';
					safariPrivateTest();
				}
				else if (isChrome()) {
					browserName = identifyChromium();
					chromePrivateTest();
				}
				else if (isFirefox()) {
					browserName = "Firefox";
					firefoxPrivateTest();
				}
				else if (isMSIE()) {
					browserName = "Internet Explorer";
					msiePrivateTest();
				}
				else {
					reject(new Error("detectIncognito cannot determine the browser"));
				}
			}
			main();
		});
	};
})();
